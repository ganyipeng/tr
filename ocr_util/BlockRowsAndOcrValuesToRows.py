# -*- coding: utf-8 -*- 
# @Time 2021/8/26 09:50


# 我要干什么：我要自己写一个将ocr识别出来的结果放到blocks对应区域的算法
# 获取模拟数据: ocr_values
# ( [cx, cy, w, h, a]:list_5, value:str, 0.0:float ):tuple_3
def get_fake_ocr_values_data():
    ocr_values = [([371.0, 46.0, 172.0, 30.571428298950195, 0.0], '合并资产负债表', 0.9999712705612183),
                  ([188.0, 75.5, 24.0, 17.71428680419922, 0.0], '', 0.0),
                  ([371.0, 73.0, 122.0, 22.0, 0.0], '2017年12月31日', 0.9992944164709612),
                  ([532.5, 81.5, 21.0, 32.0, 0.0], '', 0.0),
                  ([164.5, 99.0, 257.0, 24.85714340209961, 0.0], '编制单位:如东具新矢地投资发展有限公司', 0.9594195861565439),
                  ([637.0, 97.5, 126.0, 20.571428298950195, 0.0], '金额单位;人民币元', 0.9634124219417572),
                  ([185.5, 123.0, 59.0, 22.0, 0.0], '项目', 0.9416675567626953),
                  ([250.5, 116.5, 27.0, 14.857142448425293, 0.0], '', 0.0),
                  ([380.5, 122.5, 33.0, 20.571428298950195, 0.0], '注释', 0.9995020925998688),
                  ([488.0, 123.5, 60.0, 20.571428298950195, 0.0], '期末余额', 0.9992747604846954),
                  ([549.5, 120.0, 13.0, 16.28571319580078, 0.0], '', 0.0),
                  ([639.5, 122.5, 143.0, 26.285715103149414, 0.0], '期初余额日', 0.8626813113689422),
                  ([66.5, 149.0, 67.0, 22.0, 0.0], '流动资产:', 0.9999158978462219),
                  ([645.5, 140.0, 7.0, 7.714285850524902, 0.0], '', 0.0),
                  ([236.5, 151.5, 49.0, 20.571428298950195, 0.0], '', 0.0),
                  ([245.5, 142.0, 11.0, 10.571428298950195, 0.0], '', 0.0),
                  ([692.0, 145.0, 12.0, 19.14285659790039, 0.0], '', 0.0),
                  ([65.0, 174.5, 58.0, 20.571428298950195, 0.0], '货币资金', 0.9991813898086548),
                  ([380.5, 173.5, 57.0, 20.571428298950195, 0.0], '附注六-1', 0.9730157732963562),
                  ([501.5, 173.5, 109.0, 20.571428298950195, 0.0], '2,241,808,939.74', 0.998611181974411),
                  ([656.5, 175.0, 109.0, 22.0, 0.0], '2,459,016,299.77', 0.9998195171356201),
                  ([183.5, 199.5, 293.0, 20.571428298950195, 0.0], '以公允价值计量且其变动计入当期损益的金融资产', 0.9973505708304319),
                  ([77.0, 224.5, 84.0, 20.571428298950195, 0.0], '衍生金融资产', 0.9999127785364786),
                  ([65.0, 250.0, 58.0, 22.0, 0.0], '应收票据', 0.9999212175607681),
                  ([64.5, 275.5, 59.0, 20.571428298950195, 0.0], '应收账款', 0.9999771118164062),
                  ([380.0, 274.5, 58.0, 20.571428298950195, 0.0], '附注六·2', 0.9691291809082031),
                  ([507.5, 275.0, 97.0, 19.14285659790039, 0.0], '536,757,327.87', 0.9994389585086277),
                  ([674.5, 274.5, 71.0, 17.71428680419922, 0.0], '870,838.84', 0.9933095032518561),
                  ([64.5, 301.5, 59.0, 20.571428298950195, 0.0], '预付款项', 0.9995708614587784),
                  ([380.5, 300.0, 57.0, 19.14285659790039, 0.0], '附注六-3', 0.9241075873374939),
                  ([511.0, 300.0, 90.0, 19.14285659790039, 0.0], '59,945,591.17', 0.9981444478034973),
                  ([665.5, 301.0, 89.0, 19.14285659790039, 0.0], '56,584,402.23', 0.9996524361463693),
                  ([64.5, 326.5, 57.0, 20.571428298950195, 0.0], '应收利息', 0.9999763667583466),
                  ([190.5, 325.0, 57.0, 22.0, 0.0], '', 0.0),
                  ([65.0, 352.5, 58.0, 20.571428298950195, 0.0], '应收股利', 0.9998328238725662),
                  ([195.5, 356.5, 27.0, 14.857142448425293, 0.0], '', 0.0),
                  ([71.0, 378.5, 72.0, 20.571428298950195, 0.0], '其他应收款', 0.9998900055885315),
                  ([380.0, 377.5, 56.0, 20.571428298950195, 0.0], '附注六4', 0.9988554567098618),
                  ([502.5, 377.5, 109.0, 17.71428680419922, 0.0], '1,216,663,800.26', 0.9990972392261028),
                  ([656.0, 378.0, 108.0, 19.14285659790039, 0.0], '1,145,928,129.11', 0.9989029169082642),
                  ([51.5, 404.0, 33.0, 22.0, 0.0], '存货', 0.9986817240715027),
                  ([381.0, 403.0, 58.0, 22.0, 0.0], '附注六·5', 0.9838474988937378),
                  ([502.0, 403.5, 110.0, 20.571428298950195, 0.0], '3,872,946,736.89', 0.9999604746699333),
                  ([656.0, 404.0, 108.0, 19.14285659790039, 0.0], '3,663,287,842.14', 0.9998445510864258),
                  ([180.5, 408.0, 11.0, 7.714285850524902, 0.0], '', 0.0),
                  ([188.0, 408.0, 10.0, 7.714285850524902, 0.0], '', 0.0),
                  ([200.5, 408.0, 17.0, 7.714285850524902, 0.0], '', 0.0),
                  ([229.0, 408.0, 10.0, 7.714285850524902, 0.0], '', 0.0),
                  ([77.5, 430.0, 85.0, 22.0, 0.0], '持有待售资产', 0.9999503095944723),
                  ([41.0, 453.0, 10.0, 10.571428298950195, 0.0], '', 0.0),
                  ([116.0, 455.0, 140.0, 22.0, 0.0], '年内到期的非流动资产', 0.9998043298721313),
                  ([77.5, 481.0, 85.0, 22.0, 0.0], '其他流动资产', 0.9998789429664612),
                  ([84.5, 506.5, 83.0, 20.571428298950195, 0.0], '流动资产合计', 0.9999211728572845),
                  ([502.0, 506.0, 108.0, 19.14285659790039, 0.0], '7,928,122,395.93', 0.9998168237507343),
                  ([656.0, 505.5, 108.0, 17.71428680419922, 0.0], '7,325,687,512.09', 0.9998612925410271),
                  ([72.5, 532.0, 83.0, 22.0, 0.0], '非流动资产:', 0.9986648956934611),
                  ([196.0, 536.0, 60.0, 10.571428298950195, 0.0], '', 0.0),
                  ([256.5, 535.5, 51.0, 9.14285659790039, 0.0], '', 0.0),
                  ([91.0, 557.5, 110.0, 17.71428680419922, 0.0], '仕屮隹仝酎咨立', 0.5495830710445132)]
    return ocr_values


# 获取模拟数据：blocks
#  数据结构
#  blocks = [row1, row2, row3] ->
#  row = [block1, block2, block3] ->
#  block = [point_left_top, point_right_bottom] ->
#  point = [x, y]
def get_fake_blocks_data():
    blocks = [[[[26, 0], [711, 108]]],
              [[[26, 108], [344, 134]], [[344, 108], [413, 134]], [[413, 108], [558, 134]], [[558, 108], [711, 134]]],
              [[[26, 134], [344, 160]], [[344, 134], [413, 160]], [[413, 134], [558, 160]], [[558, 134], [711, 160]]],
              [[[26, 160], [344, 185]], [[344, 160], [413, 185]], [[413, 160], [558, 185]], [[558, 160], [711, 185]]],
              [[[26, 185], [344, 210]], [[344, 185], [413, 210]], [[413, 185], [558, 210]], [[558, 185], [711, 210]]],
              [[[26, 210], [344, 235]], [[344, 210], [413, 235]], [[413, 210], [558, 235]], [[558, 210], [711, 235]]],
              [[[26, 235], [344, 260]], [[344, 235], [413, 260]], [[413, 235], [558, 260]], [[558, 235], [711, 260]]],
              [[[26, 260], [344, 286]], [[344, 260], [413, 286]], [[413, 260], [558, 286]], [[558, 260], [711, 286]]],
              [[[26, 286], [344, 312]], [[344, 286], [413, 312]], [[413, 286], [558, 312]], [[558, 286], [711, 312]]],
              [[[26, 312], [344, 337]], [[344, 312], [413, 337]], [[413, 312], [558, 337]], [[558, 312], [711, 337]]],
              [[[26, 337], [344, 363]], [[344, 337], [413, 363]], [[413, 337], [558, 363]], [[558, 337], [711, 363]]],
              [[[26, 363], [344, 389]], [[344, 363], [413, 389]], [[413, 363], [558, 389]], [[558, 363], [711, 389]]],
              [[[26, 389], [344, 415]], [[344, 389], [413, 415]], [[413, 389], [558, 415]], [[558, 389], [711, 415]]],
              [[[26, 415], [344, 440]], [[344, 415], [413, 440]], [[413, 415], [558, 440]], [[558, 415], [711, 440]]],
              [[[26, 440], [344, 466]], [[344, 440], [413, 466]], [[413, 440], [558, 466]], [[558, 440], [711, 466]]],
              [[[26, 466], [344, 491]], [[344, 466], [413, 491]], [[413, 466], [558, 491]], [[558, 466], [711, 491]]],
              [[[26, 491], [344, 517]], [[344, 491], [413, 517]], [[413, 491], [558, 517]], [[558, 491], [711, 517]]],
              [[[26, 517], [344, 542]], [[344, 517], [413, 542]], [[413, 517], [558, 542]], [[558, 517], [711, 542]]],
              [[[26, 542], [711, 731]]]]
    return blocks


# 清除空数据: 返回x[1]!=''的数据
def remove_empty_value(ocr_values):
    return [x for x in ocr_values if x[1] != '']


# 获取模拟数据：ocr_values, blocks
def get_fake_data():
    ocr_values = get_fake_ocr_values_data()
    blocks = get_fake_blocks_data()
    return ocr_values, blocks


# 解析ocr_value->cx, cy, w, h, value
def parse_ocr_value(ocr_value):
    value_range, value, _dont_care_it = ocr_value
    cx, cy, w, h, a = value_range
    return cx, cy, w, h, value


# 获取ocr_value的value值
def get_ocr_value_value(ocr_value):
    return ocr_value[1]


# 判断 ocr_value 是否在 block 中
def is_ocr_value_in_block(ocr_value, block):
    point_left_top = block[0]
    point_right_bottom = block[1]
    x_start, y_start = point_left_top
    x_end, y_end = point_right_bottom
    block_width = x_end - x_start
    block_height = y_end - y_start

    cx, cy, w, h, value = parse_ocr_value(ocr_value)

    if x_end >= cx >= x_start and y_end >= cy >= y_start and w <= block_width and h <= block_height:
        return True
    else:
        return False


# 给block设置值：就是给block[startPoint, endPoint] append ocr_value1, ocr_value2
def set_ocr_values_to_block(ocr_values, block):
    for ocr_value in ocr_values:
        if is_ocr_value_in_block(ocr_value, block):
            block.append(ocr_value)


# 给blocks设置值
def set_ocr_values_to_blocks(ocr_values, blocks):
    for block_row in blocks:
        [set_ocr_values_to_block(ocr_values, block) for block in block_row]


# 将blocks设置为rows返回
def run(blocks, ocr_values):
    ocr_values = remove_empty_value(ocr_values)
    set_ocr_values_to_blocks(ocr_values, blocks)
    return [block_row_to_value_row(block_row) for block_row in blocks]


def block_row_to_value_row(block_row):
    return [block_to_cell(block) for block in block_row]


def block_to_cell(block):
    cell = ''
    ocr_values = block[2:]
    for ocr_value in ocr_values:
        value = get_ocr_value_value(ocr_value)
        cell += value
    return cell


def test():
    ocr_values, blocks = get_fake_data()
    rows = run(blocks, ocr_values)
    print(rows)


if __name__ == '__main__':
    test()
